# 1 "ml5.mll"
 
open Common;;


# 7 "ml5.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\210\255\211\255\005\000\213\255\001\000\000\000\001\000\
    \001\000\001\000\003\000\011\000\012\000\005\000\002\000\003\000\
    \002\000\232\255\005\000\006\000\001\000\239\255\005\000\006\000\
    \244\255\002\000\003\000\007\000\004\000\253\255\254\255\255\255\
    \248\255\236\255\247\255\246\255\245\255\238\255\241\255\240\255\
    \215\255\234\255\233\255\231\255\007\000\230\255\022\000\001\000\
    \229\255\013\000\028\000\220\255\030\000\228\255\016\000\032\000\
    \227\255\032\000\223\255\225\255\226\255\017\000\034\000\026\000\
    \224\255\036\000\219\255\209\255\031\000\030\000\222\255\026\000\
    \041\000\208\255\043\000\221\255\028\000\041\000\218\255\030\000\
    \217\255\216\255\207\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\043\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\255\255\255\255\020\000\018\000\255\255\013\000\012\000\
    \255\255\006\000\005\000\004\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\031\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\005\000\081\000\
    \003\000\002\000\026\000\028\000\001\000\027\000\082\000\025\000\
    \036\000\035\000\032\000\000\000\000\000\034\000\000\000\000\000\
    \000\000\000\000\018\000\019\000\023\000\021\000\022\000\042\000\
    \017\000\041\000\039\000\038\000\037\000\033\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\016\000\000\000\004\000\024\000\043\000\
    \000\000\013\000\068\000\046\000\048\000\012\000\009\000\047\000\
    \044\000\011\000\076\000\062\000\015\000\008\000\006\000\079\000\
    \074\000\059\000\014\000\052\000\010\000\061\000\069\000\007\000\
    \054\000\060\000\055\000\045\000\020\000\040\000\029\000\049\000\
    \050\000\051\000\053\000\057\000\056\000\058\000\065\000\063\000\
    \064\000\067\000\066\000\071\000\070\000\072\000\073\000\075\000\
    \077\000\078\000\080\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\005\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \025\000\026\000\028\000\255\255\255\255\027\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\018\000\
    \000\000\019\000\022\000\023\000\023\000\027\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\016\000\
    \255\255\000\000\009\000\014\000\047\000\000\000\000\000\014\000\
    \015\000\000\000\007\000\010\000\000\000\000\000\000\000\006\000\
    \008\000\011\000\000\000\013\000\000\000\010\000\009\000\000\000\
    \012\000\011\000\012\000\044\000\000\000\020\000\000\000\046\000\
    \049\000\050\000\052\000\054\000\055\000\057\000\061\000\062\000\
    \063\000\065\000\061\000\068\000\069\000\071\000\072\000\074\000\
    \076\000\077\000\079\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 14 "ml5.mll"
                    ( token lexbuf )
# 144 "ml5.ml"

  | 1 ->
# 15 "ml5.mll"
                    ( EOF )
# 149 "ml5.ml"

  | 2 ->
# 18 "ml5.mll"
        (NEG)
# 154 "ml5.ml"

  | 3 ->
# 19 "ml5.mll"
        (PLUS)
# 159 "ml5.ml"

  | 4 ->
# 20 "ml5.mll"
        (MINUS)
# 164 "ml5.ml"

  | 5 ->
# 21 "ml5.mll"
        (TIMES)
# 169 "ml5.ml"

  | 6 ->
# 22 "ml5.mll"
        (DIV)
# 174 "ml5.ml"

  | 7 ->
# 23 "ml5.mll"
         (DPLUS)
# 179 "ml5.ml"

  | 8 ->
# 24 "ml5.mll"
         (DMINUS)
# 184 "ml5.ml"

  | 9 ->
# 25 "ml5.mll"
         (DTIMES)
# 189 "ml5.ml"

  | 10 ->
# 26 "ml5.mll"
         (DDIV)
# 194 "ml5.ml"

  | 11 ->
# 27 "ml5.mll"
        (CARAT)
# 199 "ml5.ml"

  | 12 ->
# 28 "ml5.mll"
        (LT)
# 204 "ml5.ml"

  | 13 ->
# 29 "ml5.mll"
        (GT)
# 209 "ml5.ml"

  | 14 ->
# 30 "ml5.mll"
         (LEQ)
# 214 "ml5.ml"

  | 15 ->
# 31 "ml5.mll"
         (GEQ)
# 219 "ml5.ml"

  | 16 ->
# 32 "ml5.mll"
        (EQUALS)
# 224 "ml5.ml"

  | 17 ->
# 33 "ml5.mll"
         (NEQ)
# 229 "ml5.ml"

  | 18 ->
# 34 "ml5.mll"
        (PIPE)
# 234 "ml5.ml"

  | 19 ->
# 35 "ml5.mll"
         (ARROW)
# 239 "ml5.ml"

  | 20 ->
# 36 "ml5.mll"
        (SEMI)
# 244 "ml5.ml"

  | 21 ->
# 37 "ml5.mll"
         (DSEMI)
# 249 "ml5.ml"

  | 22 ->
# 38 "ml5.mll"
         (DCOLON)
# 254 "ml5.ml"

  | 23 ->
# 39 "ml5.mll"
        (AT)
# 259 "ml5.ml"

  | 24 ->
# 40 "ml5.mll"
         (NIL)
# 264 "ml5.ml"

  | 25 ->
# 41 "ml5.mll"
          (LET)
# 269 "ml5.ml"

  | 26 ->
# 42 "ml5.mll"
          (REC)
# 274 "ml5.ml"

  | 27 ->
# 43 "ml5.mll"
          (AND)
# 279 "ml5.ml"

  | 28 ->
# 44 "ml5.mll"
          (END)
# 284 "ml5.ml"

  | 29 ->
# 45 "ml5.mll"
         (IN)
# 289 "ml5.ml"

  | 30 ->
# 46 "ml5.mll"
         (IF)
# 294 "ml5.ml"

  | 31 ->
# 47 "ml5.mll"
           (THEN)
# 299 "ml5.ml"

  | 32 ->
# 48 "ml5.mll"
           (ELSE)
# 304 "ml5.ml"

  | 33 ->
# 49 "ml5.mll"
          (FUN)
# 309 "ml5.ml"

  | 34 ->
# 50 "ml5.mll"
          (MOD)
# 314 "ml5.ml"

  | 35 ->
# 51 "ml5.mll"
            (RAISE)
# 319 "ml5.ml"

  | 36 ->
# 52 "ml5.mll"
          (TRY)
# 324 "ml5.ml"

  | 37 ->
# 53 "ml5.mll"
           (WITH)
# 329 "ml5.ml"

  | 38 ->
# 54 "ml5.mll"
          (NOT)
# 334 "ml5.ml"

  | 39 ->
# 55 "ml5.mll"
         (LOGICALAND)
# 339 "ml5.ml"

  | 40 ->
# 56 "ml5.mll"
         (LOGICALOR)
# 344 "ml5.ml"

  | 41 ->
# 57 "ml5.mll"
        (LBRAC)
# 349 "ml5.ml"

  | 42 ->
# 58 "ml5.mll"
        (RBRAC)
# 354 "ml5.ml"

  | 43 ->
# 59 "ml5.mll"
        (LPAREN)
# 359 "ml5.ml"

  | 44 ->
# 60 "ml5.mll"
        (RPAREN)
# 364 "ml5.ml"

  | 45 ->
# 61 "ml5.mll"
        (COMA)
# 369 "ml5.ml"

  | 46 ->
# 62 "ml5.mll"
           (TRUE)
# 374 "ml5.ml"

  | 47 ->
# 63 "ml5.mll"
            (FALSE)
# 379 "ml5.ml"

  | 48 ->
# 64 "ml5.mll"
         (UNIT)
# 384 "ml5.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 67 "ml5.mll"
 (* do not modify this function: *)
 let lextest s = token (Lexing.from_string s)

 let get_all_tokens s =
     let b = Lexing.from_string (s^"\n") in
     let rec g () =
     match token b with EOF -> []
     | t -> t :: g () in
     g ()

let try_get_all_tokens s =
    try (Some (get_all_tokens s), true)
    with Failure "unmatched open comment" -> (None, true)
       | Failure "unmatched closed comment" -> (None, false)
 
# 407 "ml5.ml"
